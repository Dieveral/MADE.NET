trigger:
  branches:
    include:
    - main
    - preview/*
    - release/*

pr:
  branches:
    include:
    - main
    - preview/*
    - release/*

variables:
  - name: vmImageName
    value: 'windows-2019'

stages:
- stage: 'Build'
  variables:
    solution: '**/*.sln'
    buildConfiguration: 'Release'
  jobs:
  - job:
    pool:
        vmImage: $(vmImageName)
    timeoutInMinutes: 120

    workspace:
      clean: all

    steps:
    - task: NuGetToolInstaller@1
      displayName: Use NuGet 5.6.0
      inputs:
        versionSpec: '5.6.0'

    - task: DotNetCoreCLI@2
      displayName: Install NBGV tool
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . nbgv

    - script: nbgv cloud
      displayName: Set version

    - powershell: |
        mkdir $(Build.ArtifactStagingDirectory)\Packages
        $version = .\nbgv.exe get-version -f json | ConvertFrom-Json
        Write-Host "Version: $version"
        Write-Host "##vso[task.setvariable variable=VERSION_NUMBER;]$version.NuGetPackageVersion"
        Write-Host "NuGet Package Version: $env:VERSION_NUMBER"
      displayName: Get version

    - task: NuGetCommand@2
      displayName: Restore NuGet packages
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'

    - task: DotNetCoreCLI@2
      displayName: Build solution
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) -p:Version=$(VERSION_NUMBER)'

    - task: DotNetCoreCLI@2
      displayName: Run tests
      inputs:
        command: 'test'
        arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
        projects: 'tests/**/*Tests*.csproj'
        testRunTitle: 'Automated Tests'

    - task: reportgenerator@4
      displayName: Generate code coverage report
      inputs:
        reports: '$(Build.SourcesDirectory)/**/*.cobertura.xml'
        targetdir: '$(Build.SourcesDirectory)/CoverageResults'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/CoverageResults/Cobertura.xml'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/src'
        Contents: |
          **/*.nupkg
          **/*.snupkg
        TargetFolder: '$(Build.ArtifactStagingDirectory)/artifacts'

    - publish: '$(Build.ArtifactStagingDirectory)/artifacts'
      artifact: 'artifacts'

- stage: 'Publish'
  dependsOn: 'Build'
  condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/preview/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
  jobs:
  - job:
    pool:
        vmImage: $(vmImageName)
    timeoutInMinutes: 120

    steps:
    - checkout: none

    - download: current
      artifact: 'artifacts'

    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'NuGet - MADE Apps'